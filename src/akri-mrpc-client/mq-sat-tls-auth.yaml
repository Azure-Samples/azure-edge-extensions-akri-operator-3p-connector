## Simple deployment of the broker with authn.
## It deploys 2 frontends and 2 backend chains of length 2. Each pod has 2 workers available.
## It uses authentication but no authorization. It does not enable TLS. It uses the default namespace

############################################################
##
## This defines broker authentication resource.
## only Service Account Tokens generated with one of the listed
## audiences will be allowed to connect to MQ.
##
############################################################
---
apiVersion: mqttbroker.iotoperations.azure.com/v1beta1
kind: BrokerAuthentication
metadata:
  name: cluster-internal-auth
  namespace: default
spec:
  authenticationMethods:
  - method: ServiceAccountToken
    serviceAccountToken:
      audiences:
      - aio-internal

############################################################
##
## A at least one BrokerListener CR should be deployed before Broker,
## so that the Broker resource will not fail with missing BrokerListener.
##
############################################################
---
apiVersion: mqttbroker.iotoperations.azure.com/v1beta1
kind: BrokerListener
metadata:
  name: test-listener
  namespace: default
spec:
  brokerRef: broker
  serviceType: loadBalancer
  ports:
  - port: 1883
    authenticationRef: cluster-internal-auth
  - port: 18883
    authenticationRef: cluster-internal-auth
    tls:
      mode: automatic
      automatic:
        issuerRef:
          name: test-cert-issuer
          kind: Issuer
############################################################
##
## This defines the broker itself
##
############################################################
---
apiVersion: mqttbroker.iotoperations.azure.com/v1beta1
kind: Broker
metadata:
  name: broker
  namespace: default
spec:
  advanced:
    ## Internal tls has a dependency on cert manager. This case isn't covered in the simple deployment.
    encryptInternalTraffic: Disabled
  cardinality:
    frontend:
      ## This determines how many frontend pods are deployed. This scales both availability and reliability, but requires sufficient backend capacity to function.
      replicas: 2
      ## This determines how many workers each pod will create. More powerful nodes can support more workers in each pod.
      workers: 2
    backendChain:
      ## This determines how many pods will be in each backend chain. Increasing this improves availability but increases latency.
      ## As long as one pod in each backend chain is functional, the broker be fully functional and lose no messages.
      redundancyFactor: 2
      ## This is how the broker scales capacity. Increasing this will increase the volume of messages the broker can handle, as long as messages are evenly distributed among topics.
      partitions: 2
      ## This determines how many workers each pod will create.
      workers: 2
  ## This will check that there are enough cores available on the cluster for each worker to have its own.
  ## If this is true (the default value) and not enough cores are available, the broker will not start.
  generateResourceLimits:
    cpu: Disabled
  ## Possible values
  ## - Tiny
  ## - Low
  ## - Medium (default)
  ## - High
  memoryProfile: "Medium"
